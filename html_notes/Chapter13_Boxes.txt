*** BOXES ***

Controlling size of boxes
Box model for borders,margin and padding
Displaying and Hiding boxes


1. BOX DIMENSIONS (width,height) :

1. By default a box is sized just big enough to hold its contents. To set your own dimensions for a box you can use the height and width properties.
2. The most popular ways to specify the size of a box are to use pixels, percentages, or ems. Traditionally, pixels have been the most popular method
   because they allow designers to accurately control their size.
3. When you use percentages,the size of the box is relative to the size of the browser window or, if the box is encased within another box, 
   it is a percentage of the size of the containing box.
4. When you use ems, the size of the box is based on the size of text within it. Designers have recently started to use percentages and ems more for
   measurements as they try to create designs that are flexible across devices which have different-sized screens.

e.g.:
div.box 
{
height: 300px;
width: 300px;
background-color: #bbbbaa;
}
p {
height: 75%;
width: 75%;
background-color: #0088dd;
}

2. LIMITING WIDTH (min-width,max-width) :

1. Some page designs expand and shrink to fit the size of the user's screen. In such designs, the min-width property specifies the smallest size a box can be
   displayed at when the browser window is narrow, and the max-width property indicates the maximum width a box can stretch to when the browser window is wide.
2. These are very helpful properties to ensure that the content of pages are legible (especially on the smaller screens of handheld devices). 
   For example, you can use the max-width property to ensure that lines of text do not appear too wide within a big browser window and you can use the min-width property
   to make sure that they do not appear too narrow.
3. You may find it helpful to try this example out in your browser so that you can see what happens when you increase or decrease the size of the browser window.

e.g.:
td.description 
{
min-width: 450px;
max-width: 650px;
text-align: left;
padding: 5px;
margin: 0px;
}

3. LIMITING HEIGHT (min-width,max-width) :

1. In the same way that you might want to limit the width of a box on a page, you may also want to limit the height of it. This is achieved using the min-height
   and max-height properties.
2. The example on this page demonstrates these properties in action. It also shows you what happens when the content of the box takes up more space than
   the size specified for the box.
3. If the box is not big enough to hold the content, and the content expands outside the box it can look very messy. To control what happens when there is not
   enough space for the content of a box, you can use the overflow property.
   
   e.g.:
   h2, p {
   width: 400px;
   font-size: 90%;
   line-height: 1.2em;
         }
   h2 {
   color: #0088dd;
   border-bottom: 1px solid #0088dd;
      }
   p {
   min-height: 10px;
   max-height: 30px;
     }
	 p.one {
   overflow: hidden;
           }
     p.two {
   overflow: scroll;
           }
		   
4. OVERFLOWING CONTENT Properties.

1. overflow : The overflow property tells the browser what to do if the content contained within a box is larger than the box itself. It can have
             one of two values:
			 
			 1. hidden : This property simply hides any extra content that does not fit in the box.
			 2. scroll : This property adds a scrollbar to the box so that users can scroll to see the missing content.
			 
5. BORDER MARGIN AND PADDING :

Every box has three available properties that can be adjusted to control appearance:

1. BORDER  : Every box has a border (even if it is not visible or is specified to be 0 pixels wide). The border separates the edge of one box from another.
2. MARGIN  : Margins sit outside the edge of the border. You can set the width of a margin to create a gap between the borders of two adjacent boxes.
3. PADDING : Padding is the space between the border of a box and any content contained within it. Adding padding can increase the readability of its contents.

Note      : If you specify a width for a box, then the borders, margin, and padding are added to its width and height.

6. WHITE SPACE AND VERTICAL MARGIN 

The padding and margin properties are very helpful in adding space between various items on the page. White space & Vertical Margin 
With Margin & Padding
Without Margin & Padding.

7. BORDER WIDTH (border-width) :

The border-width property is used to control the width of a border. The value of this property can either be given in pixels or using one of the
following values:
1. thin
2. medium
3. thick

Note : (You cannot use percentages with this property.)

You can control the individual size of borders using four separate properties:
1. border-top-width            T
2. border-right-width          R
3. border-bottom-width         B
4. border-left-width           L 

p.one { border-width: 2px;   }
p.two { border-width: thick; }
p.three { border-width: 1px 4px 12px 4px; }


8. BORDER STYLE  (border-style) :

You can control the style of a border using the border-style property. This property can take the following values:

1. solid           : a single solid line.
2. dotted          : a series of square dots (if your border is 2px wide, then the dots are 2px squared with a 2px gap between each dot).
3. dashed          : a series of short lines.
4. double          : two solid lines (the value of the border-width property creates the sum of the two lines).
5. groove          : appears to be carved into the page.
6. ridge           : appears to stick out from the page.
7. inset           : appears embedded into the page.
8. outset          : looks like it is coming out of the screen.
9. hidden / none   : no border is shown.

Note : You can individually change the styles of different borders using:

1. border-top-style
2. border-left-style
3. border-right-style
4. border-bottom-style

e.g.: 
p.one {border-style: solid;}
p.two {border-style: dotted;}
p.three {border-style: dashed;}
p.four {border-style: double;}
p.five {border-style: groove;}
p.six {border-style: ridge;}
p.seven {border-style: inset;}
p.eight {border-style: outset;}

9. BORDER COLOR :

You can specify the color of a border using either RGB values, hex codes or CSS color names.
It is possible to individually control the colors of the borders on different sides of a box using:

1. border-top-color
2. border-right-color
3. border-bottom-color
4. border-left-color

e.g.:
p.one {
       border-color: #0088dd;
      }
p.two {
      border-color: #bbbbaa #111111 #ee3e80 #0088dd;
	  }

10. SHORTHAND BORDER :

The border property allows you to specify the width, style and color of a border in one property (and the values should be codedin that specific order).

e.g:
p {
width: 250px;
border: 3px dotted #0088dd;
  }
  
10. PADDING : 

The padding property allows you to specify how much space should appear between the content of an element and its border.
The value of this property is most often specified in pixels (although it is also possible to use percentages or ems). 
If a percentage is used, the padding is a percentage of the browser window (or of the containing box if it is inside another box).

Note : If a width is specified for a box, padding is added onto the width of the box.

e.g.:
p { width: 275px; border: 2px solid #0088dd; }
p.example { padding: 10px; }

You can specify different values for each side of a box using:

1. padding-top
2. padding-right
3. padding-bottom
4. padding-left 

e.g.: padding: 10px 5px 3px 1px;

11. MARGIN 

The margin property controls the gap between boxes. Its value is commonly given in pixels, although you may also use percentages or ems.
If one box sits on top of another,margins are collapsed , which means the larger of the two margins will be used and the smaller will be disregarded.

Note : If the width of a box is specified then the margin is added to the width of the box.

You can specify values for each side of a box using:

1. margin-top
2. margin-right
3. margin-bottom
4. margin-left

You can also use the shorthand (where the values are in clockwise order: top, right, bottom, left): margin: 1px 2px 3px 4px;
This same shorthand shown above can also be applied to padding.

12. CENTERING CONTENT

1. If you want to center a box on the page (or center it inside the element that it sits in), you can set the left-margin and right-margin to auto.
2. In order to center a box on the page, you need to set a width for the box (otherwise it will take up the full width of the page).
3. Once you have specified the width of the box, setting the left and right margins to auto will make the browser put an equal gap on each side of the box. 
   This centers the box on the page (or within the element that the box sits inside).

e.g.:

body { text-align: center; }
p { width: 300px; padding: 50px; border: 20px solid #0088dd; }
p.example { margin: 10px auto 10px auto; text-align: left; }


13. IE6 BOX MODEL.

1. When you specify the width of a box, any padding or margin should be added to the width of it. Internet Explorer 6, however, has a quirk whereby it includes
   the padding and margins in the width of the box.
2. You can use either the HTML5, HTML 4 strict, or HTML 4 transitional DOCTYPE declarations to ensure that IE6 follows the correct box model.

14. CHANGE INLINE/BLOCK

1. display : The display property allows you to turn an inline element into a block-level element or vice versa, and can also be used to hide an element 
             from the page.
             The values this property can take are:
			 A. inline       : This causes a block-level element to act like an inline element.
			 B. block        : This causes an inline element to act like a block-level element.
			 C. inline-block : This causes a block-level element to flow like an inline element, while retaining other features of a block-level element.
			 D. none         : This hides an element from the page. In this case, the element acts as though it is not on the page at all 
			                  (although a user could still see the content of the box if they used the view source option in their browser).
							  
Note : if use none property it is important to note that inline boxes are not supposed to create block-level elements.				  
e.g. :

li { display: inline; margin-right: 10px; }
li.coming-soon { display: none; }

14. HIDING BOXES (visibility).

1. visibility : The visibility property allows you to hide boxes from users but It leaves a space where the element would have been.

This property can take two values:

A. hidden  : This hides the element.
B. visible : This shows the element. If the visibility of an element is set to hidden, a blank space will appear in its place. 
             If you do not want a blank space to appear, then you should use the display property with a value of none instead.
			 
15. CSS3 BORDER IMAGES (border-image) :

The border-image property applies an image to the border of any box. It takes a background image and slices it into nine pieces.
This property requires three pieces of information :

1: The URL of the image
2: Where to slice the image
3: What to do with the straight edges; the possible values are: stretch stretches the image repeat repeats the image round like repeat 
   but if the tiles do not fit exactly, scales the tile image so they will.

The box must also have a border width for the image to be shown.

16. CSS3 BOX SHADOWS (box-shadow):

The box-shadow property allows you to add a drop shadow around a box.
It must use at least the first of these two values as well as a color:

1. Horizontal offset       : Negative values position the shadow to the left of the box.
2. Vertical offset         : Negative values position the shadow to the top of the box.
3. Blur distance           : If omitted, the shadow is a solid line like a border.
4. Spread of shadow        : If used, a positive value will cause the shadow to expand in all directions, and a negative value will make it contract.
                             The inset keyword can also be used before these values to create an inner-shadow.  
							 
17. CSS3 ROUNDED CORNERS (border-radius) :

1. CSS3 introduces the ability to create rounded corners on any box, using a property called border-radius. The value indicates the size of the radius
   in pixels.
2. Older browsers that do not support this property will show a box with right-angled corners.
3. The -moz-border-radius and -webkit-border-radius properties are not in the CSS specification.

You can specify individual values for each corner of a box using:

1. border-top-right-radius
2. border-bottom-right-radius
3. border-bottom-left-radius
4. border-top-left-radius

e.g. : 
p {
border: 5px solid #cccccc;
padding: 20px;
width: 275px;
text-align: center;
border-radius: 10px;
-moz-border-radius: 10px;
-webkit-border-radius: 10px;
   }
   
18. CSS3 ELIPTICAL SHAPES (border-radius) :

To create more complex shapes,you can specify different distances for the horizontal and the vertical parts of the rounded corners.
e.g. :
p.one {
border-top-left-radius: 80px 50px;
-moz-border-radius-top-left: 80px 50px;
-webkit-border-radius-top-left: 80px 50px;
     }
p.two {
border-radius: 1em 4em 1em 4em / 2em 1em 2em 1em;
-moz-border-radius: 1em 4em 1em 4em
/ 2em 1em 2em 1em;
-webkit-border-radius: 1em 4em 1em 4em
/ 2em 1em 2em 1em;
      }
p.three {
padding: 0px;
border-radius: 100px;
-moz-border-radius: 100px;
-webkit-border-radius: 100px;
        }




   
 





