Definition of Forms:
     Traditionally, the term 'form' has referred to a printed document that contains spaces for you to fill in information.
	 HTML borrows the concept of a form to refer to different elements that allow you to collect information from visitors to your site.
	 
A. Form Controls:
1. Adding Text        : Text Input, Password Input and Text area.
2. Making Choices     : Radio Button,Checkboxes,Drop-down boxes.
3. Submitting Forms   : Submit Button, Image Buttons(allo you to use image to submit)
4. Uploadig Files     : Allow users to upload files (e.g. images to website)

B. How Form Works:
1. A user fills in a form and then presses a button to submit the information to the server.
2. The name of each form control is sent to the server along with the value the user enters or selects.
3. The server processes the information using a programming language such as PHP, C#, VB.net,or Java. It may also store
   the information in a database.
4. The server creates a new page to send back to the browser based on the information received.

C. Form Structure:

1. <form> tag: A form started with the form element. This element should always carry the action attribute and will usually have a method and id attribute too.

D. Attributes used in the <form>

1. action: Every <form> element requires an action attribute. Its value is the URL for the page on the server that will receive the 
           information in the form when it is submitted. 
		   
2. method: Forms can be sent using one of two methods: get or post.
      
	  2.1 get method:  The get method is ideal for 
	                   A. Short forms (Such as Search Boxes)
					   B. When you are just retreiving data from web server (not sending information that should be added or deleted from a database.)

      2.2 post method: With the post method values are sent in what are knon as HTTP headers. 
	                   You should use Post method when
					   A. allows users to upload a file.
					   B. is very long
					   C. adds information to, or deletes information from, a database.
					   D. contains sensitive data (e.g. Passwords)
					   
E. TEXT INPUT:
            
1. <input> tag: The <input> element is used to create several different form controls. The value of the type attribute determines what kind
                of input they will be creating.
				
Attributes of <input> tag:
1. type             : type="text" when attribute type has value as text, it creates single line text input.
2. name             : When users enter information into a form, the server needs to know which form control each piece of data was entered into.
                      (For example, in a login form, the server needs to know what has been entered as the username and what has been given as the
                       password.) Therefore, each form control requires a name attribute. The value of this attribute identifies the form control 
			           and is sent along with the information they enter to the server.   
3. size             : In the older HTML it was used to indicate the width of the text input. Now CSS3 handle this things perfectly.
4. maxlength        : You can use the maxlength attribute to limit the number of characters a user may enter into the text field. 
                      Its value is the number of characters they may enter. For example, if you were asking for a year, the maxlength
                      attribute could have a value of 4.
5. type="passoword" : When the type attribute has a value of password it creates a text box that acts just like a single-line text input, except
                      the characters are blocked out. They are hidden in this way so that if someone is looking over the user's shoulder, they cannot
                      see sensitive data such as passwords.
e.g.:
                      <form action="http://www.example.com/login.php">
							<p>Username:
								<input type="text" name="username" size="15" maxlength="30" />
							</p>
							<p>Password:
								<input type="password" name="password" size="15" maxlength="30" />
							</p>
                      </form>

F. TEXT AREA:

1. The <textarea> element: The <textarea> element is used to create a mutli-line text input. Unlike other input elements this is not an empty
                           element. It should therefore have an opening and a closing tag. Any text that appears between the opening <textarea> and
                           closing </textarea> tags will appear in the text box when the page loads.

e.g.:
                        <form action="http://www.example.com/comments.php">
							<p>What did you think of this gig?</p>
								<textarea name="comments" cols="20" rows="4">Enter your comments...</textarea>
						</form>						   
						
If you are creating a new form, you should use CSS to control the width and height of a <textarea>. However, if you are looking at older code, 
you may see the cols and rows attributes used with this element.
The cols attribute indicates how wide the text area should be (measured in numbers of characters). The rows attribute indicates how many rows
the text area should take up vertically.

G. RADIO BUTTON:
                type="radio",Radio buttons allow users to pick just one of a number of options.
                1. value attribute: The value attribute indicates the value that is sent to the server for the selected option. The value of each of the buttons
                                    in a group should be different (so that the server knows which option the user has selected).
                Please note: Once a radio button has been selected it cannot be deselected. The user can only select a different option. 
				If you are only allowing the user one option and want them to be able to deselect it (for example if they are indicating they agree
                to terms and conditions), you should use a checkbox instead.
				
                2. checked attribute: The checked attribute can be used to indicate which value (if any) should be selected when the page loads. 
				                      The value of this attribute is checked. Only one radio button in a group should use this attribute.

e.g.:
     <form action="http://www.example.com/profile.php">
		<p>Please select your favorite genre:
		<br />
		<input type="radio" name="genre" value="rock" checked="checked" /> Rock
		<input type="radio" name="genre" value="pop" /> Pop
		<input type="radio" name="genre" value="jazz" /> Jazz
		</p>
	 </form>
	 

H. CHECKBOX BUTTON:

                type="checkbox", Checkboxes allow users to select (and unselect) one or more options in answer to a question.
				1. name attribute  : The name attribute is sent to the server with the value of the option(s) the user selects. 
				                     When a question provides users with options for answers in the form of checkboxes, 
									 the value of the name attribute should be the same for all of the buttons that answer that question.
			    2. value attribute : The value attribute indicates the value sent to the server if this checkbox is checked.
				3. checked         : The checked attribute indicates that this box should be checked when the page loads. 
				                     If used, its value should be checked.

e.g.:
        <form action="http://www.example.com/profile.php">
			<p>Please select your favorite music service(s):
			<br />
			<input type="checkbox" name="service"
			value="itunes" checked="checked" /> iTunes
			<input type="checkbox" name="service"
			value="lastfm" /> Last.fm
			<input type="checkbox" name="service"
			value="spotify" /> Spotify
			</p>
		</form>
		

I. DROP-DOWN List Box:

         1. <select>       : A drop down list box (also known as a select box) allows users to select one option from a drop down list
		 2. name attribute : The name attribute indicates the name of the form control being sent to the server, along with the value the user selected.
		 3. <option> tag   : The <option> element is used to specify the options that the user can select from. The words between the opening <option>
                             and closing </option> tags will be shown to the user in the drop down box.
		 4. value          : The <option> element uses the value attribute to indicate the value that is sent to the server along with the name of the
                             control if this option is selected
		 5. selected       : The selected attribute can be used to indicate the option that should be selected when the page loads. The value of this
                             attribute should be selected. If this attribute is not used,the first option will be shown when the page loads. 
							 If the user does not select an option, then the first item will be sent to the server as the value for this control.
		 
Note:   The function of the drop down list box is similar to that of the radio buttons (in that only one option can be selected). 
        There are two key factors in choosing which to use:
		
		1. If users need to see all options at a glance, radio buttons are better suited.
		2. If there is a very long list of options (such as a list of countries), drop down list boxes work better.
		
e.g.:
        <form action="http://www.example.com/profile.php">
			<p>What device do you listen to music on?</p>
			<select name="devices">
			<option value="ipod">iPod</option>
			<option value="radio">Radio</option>
			<option value="computer">Computer</option>
			</select>
		</form>>
		
J. MULTIPLE SELECT BOX:
						<select> element Attributes:
						1. Size     : You can turn a drop down select box into a box that shows more than one option by adding the size attribute.
						2. multiple : You can allow users to select multiple options from this list by adding the multiple attribute with a value of multiple.
					
Note: It is a good idea to tell users if they can select more than one option at a time. It is also helpful to indicate that on a PC they 
      should hold down the control key while selecting multiple options and on a Mac they should use the command key while selecting options.
	  
e.g.: 
        <form action="http://www.example.com/profile.php">
              <p>Do you play any of the following instruments?
              (You can select more than one option by holding
              down control on a PC or command key on a Mac
              while selecting different options.)</p>
              <select name="instruments" size="3" multiple="multiple">
              <option value="guitar" selected="selected">Guitar</option>
              <option value="drums">Drums</option>
              <option value="keyboard" selected="selected">Keyboard</option>
              <option value="bass">Bass</option>
              </select>
        </form>


K. FILE INPUT BOX:

<input> element: If you want to allow users to upload a file (for example an image, video, mp3, or a PDF),you will need to use a file input box.        				

1. type="file" attribute: This type of input creates a box that looks like a text input followed by a browse button. 
                          When the user clicks on the browse button, a window opens up that allows them to select a file from their computer to be
                          uploaded to the website.
						  
Note: When you are allowing users to upload files, the method attribute on the <form> element must have a value of post. 
      (You cannot send files using the HTTP get method.)
	  
      When a user clicks on the browse button, the presentation of the window that allows them to browse for the file they want to upload will match the
      windows of the user's operating system. You cannot control the appearance of these windows.
	  
e.g.:

        <form action="http://www.example.com/upload.php" method="post">
               <p>Upload your song in MP3 format:</p>
               <input type="file" name="user-song" /><br />
               <input type="submit" value="Upload" />
        </form>


L. SUBMIT BUTTON:

type="submit"   :  The submit button is used to send a form to the server.
name attribute  :  It can use a name attribute but it does not need to have one.
value attribute :  The value attribute is used to control the text that appears on a button. It is a good idea to specify the words you want to
                   appear on a button because the default value of buttons on some browsers is ‘Submit query’ and this might not be appropriate for
                   all kinds of form.

M. IMAGE BUTTON:

type="image"    : If you want to use an image for the submit button, you can give the type attribute a value of image. The src, width, height,
				  and alt attributes work just like they do when used with the <img> element.
				  
e.g.:
                <form action="http://www.example.org/subscribe.php">
                  <p>Subscribe to our email list:</p>
                  <input type="text" name="email" />
                  <input type="image" src="images/subscribe.jpg" width="100" height="20" />
                </form>  

N. BUTTON AND HIDDEN CONTROLS:

					The <button> element was introduced to allow users more control over how their buttons appear, and to allow other 
					elements to appear inside the button. This means that you can combine text and images between the opening <button>
                    tag and closing </button> tag.

input type="hidden" : This example also shows a hidden form control. These form controls are not shown on the page 
                     (although you can see them if you use the View Source option in the browser). They allow web page authors to add values to
                     forms that users cannot see. For example, a web page author might use a hidden field to indicate which page the user was
                     on when they submitted a form.
					 
O. LABELLING FORM CONTROL:
 
 1. <label> element: When introducing form controls, the code was kept simple by indicating the purpose of each one in text next to it. 
                     However, each form control should have its own <label> element as this makes the form accessible to vision-impaired users.
 
Note: Lable element can be used in two ways It can:

1. Wrap around both the text description and the form input.
2. Be kept separate from the form control and use the for attribute to indicate which form control it is a label for.  

 2. for attribute: The for attribute states which form control the label belongs to. Note how the radio buttons use the id attribute. 
                   The value of the id attribute uniquely identifies an element from all other elements on a page.
				   
The value of the for attribute matches that of the id attribute on the form control it is labelling.  
When a <label> element is used with a checkbox or radio button, users can click on either the form control or the
label to select. The expanded clickable area makes the form easier to use. The position of the label is very important. 
If users do not know where to enter information or what information to enter, they are less likely to use the form correctly.

The best places to place labels on form controls.
1. Above or to the left:
                        ●● Text inputs
						●● Text areas
						●● Select boxes
						●● File uploads

2. To the right:

                       ●● Individual checkboxes
					   ●● Individual radio buttons   
					   

P. GROUPING FORM ELEMENTS:

1. <fieldset> element : You can group related form controls together inside the <fieldset> element. 
                        This is particularly helpful for longer forms.
					   
2. <legend> element  : The <legend> element can come directly after the opening <fieldset> tag and contains a caption which helps identify the
                       purpose of that group of form controls.
					   
e.g.: 
					<fieldset>
							<legend>Contact details</legend>
							<label>Email:<br />
							<input type="text" name="email" /></label><br />
							<label>Mobile:<br />
							<input type="text" name="mobile" /></label><br />
							<label>Telephone:<br />
							<input type="text" name="telephone" /></label>
					</fieldset>

Q. HTML5 FORM VALIDATION:
							You have probably seen forms on the web that give users messages if the form control has
							not been filled in correctly; this is known as form validation.
							Traditionally, form validation has been performed using JavaScript.
							But HTML5 is introducing validation and leaving the work to the browser.
							
							Validation helps ensure the user enters information in a form that the server will be able
							to understand when the form is submitted. Validating the contents of the form before it is
							sent to the server the helps:
							●● Reduce the amount of work the server has to do 
							●● Enables users to see if there are problems with the form faster than if validation were performed on the server.


e.g.:
          <form action="http://www.example.com/login/" method="post">
			<label for="username">Username:</label>
			<input type="text" name="username"
			required="required" /></title><br />
			<label for="password">Password:</label>
			<input type="password" name="password"
			required="required" />
			<input type="submit" value="Submit" />
		  </form>
		  
R. DATE INPUT:

Many forms need to gather information such as dates, email addresses, and URLs. This has traditionally been done using text inputs.
HTML5 introduces new form controls to standardize the way that some information is gathered. Older browsers that do not recognize these inputs
will just treat them as a single line text box.

1. type="date" attribute: If you are asking the user for a date, you can use an <input> element and give the type attribute a value of date.
						  This will create a date input in browsers that support the new HMTL5 input types.
						  
e.g.:
                                              <form action="http://www.example.com/bookings/" method="post">
                                              <label for="username">Departure date:</label>
                                              <input type="date" name="depart" />
                                              <input type="submit" value="Submit" />
                                              </form>
						  
S. EMAIL AND URL INPUT:

1. type="email" attribute : If you ask a user for an email address, you can use the email input. Browsers that support HTML5 validation will check
                            that the user has provided information in the correct format of an email address. Some smart phones also optimize their
                            keyboard to display the keys you are most likely to need when entering an email address (such as the @ symbol).						
       
2. type="url" attribute   :	A URL input can be used when you are asking a user for a web page address. Browsers that support HTML5 validation will
							check that the user has provided information in the format of a URL. Some smart phones also optimize their keyboard to
							display the keys you are most likely to need when entering a URL.			
							
e.g.:
             <form action="http://www.example.org/profile.php">
				<p>Please enter your website address:</p>
				<input type="url" name="website" />
				<input type="submit" value="Submit" />
			 </form>

T. SEARCH INPUT:

1. type="search" attribute : If you want to create a single line text box for search queries, HTML5 provides a special search input.
							 To create the HTML5 search box the <input> element should have a type attribute whose value is search. 
							 Older browsers will simply treat it like a single line text box.
							 
2. placeholder attribute   : On any text input, you can also use an attribute called placeholder whose value is text that will be shown in the
							 text box until the user clicks in that area. Older browsers simply ignore this attribute.

e.g.:
                <form action="http://www.example.org/search.php">
                <p>Search:</p>
                <input type="search" name="search"
                placeholder="Enter keyword" />
                <input type="submit" value="Search" />
                </form>							 
				



