What CSS does
How  CSS Works
Rules , Properties and Values.

Using CSS, you could add a border around any of the boxes, specify its width and height, or add a background color. 
You could also control text inside a box — for example, its color, size, and the typeface used.

EXAMPLE STYLES:

1. BOXES    : Width and height Borders (color, width, and style) Background color and images Position in the browser window.
2. TEXT     : Typeface,Size,Color,Italics, bold, uppercase,lowercase, small-caps.
3. SPECIFIC : There are also specific ways in which you can style certain elements such as lists, tables, and forms.

CSS Associates Style rules with HTML elements.

CSS works by associating rules with HTML elements. These rules govern how the content of specified elements should be displayed. 
A CSS rule contains two parts: a selector and a declaration.

e.g.:
SELECTOR    : P <element>
DECLARATION : font-family : Arial;

SELECTOR    : indicate which element the rule applies to. The same rule can apply to more than one element if you separate the element names
              with commas.
		   
DECLARATION : indicate how the elements referred to in the selector should be styled. Declarations are split into two parts (a property and a value),
              and are separated by a colon.
			  
e.g.:

h1,h2,h3
{
   font-family : Arial;
   color       : yellow;
}

*** Using External CSS ***

1. <link> element : The <link> element can be used in an HTML document to tell the browser where to find the CSS file used to style the page. 
                    It is an empty element (meaning it does not need a closing tag), and it lives inside the <head> element. 
					It should use three attributes:

attributes of the <link> element:

1. href           : This specifies the path to the CSS file (which is often placed in a folder called css or styles).
2. type           : This attribute specifies the type of document being linked to. The value should be text/css.
3. rel            : This specifies the relationship between the HTML page and the file it is linked to. 
                    The value should be stylesheet when linking to a CSS file.
					
Note              : An HTML page can use more than one CSS style sheet. To do this it could have a <link> element for every CSS file it uses. 
                    For example, some authors use one CSS file to control the presentation (such as fonts and colors) and a second to control
                    the layout.
					
*** Using Interna CSS ***

1. <style> element : Include CSS rules within an HTML page by placing them inside a <style> element, which usually sits inside the <head> element of the page.
                     The <style> element should use the type attribute to indicate that the styles are specified in CSS. 
					 The value should be text/css.

VIMP Note         :  When building a site with more than one page, you should use an external CSS style sheet. 

This              : ●● Allows all pages to use the same style rules (rather than repeating them in each page).
                    ●● Keeps the content separate from how the page looks. 
					●● Means you can change the styles used across all pages by altering just one file (rather than each individual page).
					

*** The CSS Selector ***

CSS selectors are case sensitive,so they must match element names and attribute values exactly.
There are some more advanced selectors which allow you to select elements based on attributes and their values.

1. UNIVERSAL  SELECTOR       : Applies to all elements in the document. e.g. : * { }    Targets all elements in the page.
2. TYPE       SELECTOR       : Matches element names                    e.g. : h1,h2,h3 Targets the h1,h2,h3 element.
3. CLASS      SELECTOR       : Matches an element whose class attribute has a value that matches the one specified after the period (full stop) symbol.
                               e.g.: .note{}    Targets any element whose class attribute has a value of note
			 				        p.note{}   Targets only <p> elements whose class attribute has a value of a note.
4. ID         SELECTOR       : Matches an element whose id attribute has a value that matches the one specified after the pound or hash symbol.
                               e.g.: #introduction Targets the element whose id attribute has a value of introduction.
5. CHILD      SELECTOR       : Matches an element that is a direct child of another. 
                               e.g.: li>a {}    Targets any <a> elements that are children of an <li> element (but not other <a> elements in the page)
6. DESCENDENT SELECTOR       : Matches an element that is a descendent of another specified element (not just a direct child of that element)
                               e.g.: p a {}     Targets any <a> elements that sit inside a <p> element, even if there are other elements nested
							   between them.
7. ADJACENT SIBLING SEELCTOR : Matches an element that is the next sibling of another.
                               e.g.: h1 + p  Targets the first <p> element after any <h1> element (but not other <p> elements)
8. GENERAL SIBLING SELECTOR  : Matches an element that is a sibling of another, although it does not have to be the directly preceding element.
                               e.g.: h1~p {} If you had two <p> elements that are siblings of an <h1> element, this rule would apply to both.
							   
							   

*** HOW CSS RULES CASCADE ***

Consider following CSS file. Perfect example for the CASCADE Rule.

* {
font-family: Arial, Verdana, sans-serif;}
h1 {
font-family: "Courier New", monospace;}
i {
color: green;}
i {
color: red;}
b {
color: pink;}
p b {
color: blue !important;}
p b {
color: violet;}
p#intro {
font-size: 100%;}
p {
font-size: 75%;}

1. LAST RULE                 : If the two selectors are identical, the latter of the two will take precedence. 
                               Here you can see the second i selector takes precedence over the first. (i.e red)
							   
2. SPECIFICITY               : If one selector is more specific than the others, the more specific rule will take precedence over more general ones.
                               e.g.: h1 is more specific than *
							         p b is more specific than p
									 p#intro is more specific than p
									 
3. IMPORTANT                 : You can add !important after any property value to indicate that it should be considered more important than other rules
                               that apply to the same element.
							   
							   
*** INHERITANCE ***

1.  If you specify the font-family or color properties on the <body> element, they will apply to most child elements. This is because the value of the
	font-family property is inherited by child elements. It saves you from having to apply these properties to as many elements 
	(and results in simpler style sheets).
2.  You can compare this with the background-color or border properties; they are not inherited by child elements. If these were inherited by all child
	elements then the page could look quite messy.
3.  You can force a lot of properties to inherit values from their parent elements by using inherit for the value of the properties.
    e.g.: The <div> element with a class called page inherits the padding size from the CSS rule that applies to the <body> element.
	
	
*** WHY USE EXTERNAL STYLE SHEET ***

1. All of your web pages can share the same style sheet. This is achieved by using the <link> element on each HTML page of your site to link to the same CSS
   document. This means that the same code does not need to be repeated in every page (which results in less code and smaller HTML pages).
2. Therefore, once the user has downloaded the CSS stylesheet, the rest of the site will load faster. If you want to make a change to how your site appears,
   you only need to edit the one CSS file and all of your pages will be updated. For example, you can change the style of every <h1> element by altering
   the one CSS style sheet, rather than changing the CSS rules on every page. The HTML code will be easier to read and edit because it does not have lots of
   CSS rules in the same document. It is generally considered good practice to have the content of the site separated from the rules that determine 
   how it appears.


*** DIFFERENT VERSIONS OF CSS AND BROWSERS QUIRKS ***

CSS1 was released in 1996 and CSS2 followed two years later. 
Work on CSS3 has been ongoing but the major browsers have already started to implement it.					

1. In the same way that there have been several versions of HTML, there have also been different versions of CSS.
2. Browsers did not implement all CSS features at once, so some older browsers do not support every property.
3. This is mentioned when it is likely to affect you, along with notes where CSS properties might not behave as expected.

Any seasoned user of CSS will tell you that some browsers display a few of the CSS properties in an unexpected way. 
But finding and squashing those bugs is easy when you know how.

1. Before launching any new site, it is important to test it in more than one browser, because there can be slight differences in how
   browsers display the pages. You do not need lots of computers to test your site, as there are online tools to show you what a page looks like in
   multiple browsers:
   1. BrowserCam.com
   2. BrowserLab.Adobe.com
   3. BrowserShots.org
   4. CrossBrowserTesting.com
   
2. Using these tools, it is a good idea to check the site on different operating systems (PC,Mac, and Linux) and in older versions of the major browsers,
   as well as recent versions. When you look at your site in more than one browser, you might find that some elements on your page do not look as you
   expect them to. When a CSS property does not display as expected, it is generally referred to as a browser quirk or CSS bug.
   
3. If you come across a CSS bug, you can use your favorite search engine to try and find a solution. Or you can check these sites:
   1. PositionIsEverything.net
   2. QuirksMode.org

								  
